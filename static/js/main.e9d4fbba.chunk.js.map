{"version":3,"sources":["editor/NewData.js","config/context.js","config/Firebase.js","editor/SignUpForm.js","editor/SignInForm.js","App.js","serviceWorker.js","index.js"],"names":["NewData","Component","FirebaseContext","React","createContext","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","app","initializeApp","this","INITIAL_STATE","username","passwordOne","passwordTwo","error","MyForm","props","onSubmit","event","state","firebase","then","authUser","setState","catch","preventDefault","onChange","target","name","value","isInvalid","type","placeholder","disabled","message","SignUpForm","Consumer","SignInForm","App","Boolean","window","location","hostname","match","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9d4fbba.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass NewData extends Component {\n    render() {\n      return (\n        <div>\n         NewData\n        </div>\n      );\n    }\n  }\n  export default NewData;","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport default FirebaseContext;","import FirebaseContext from './context';\n\nimport app from 'firebase/app';\nimport 'firebase/auth';\n\n// import { FIREBASE_CONFIG } from \"./constants\";\n\n// const {\n//     apiKey,\n//     authDomain,\n//     databaseURL,\n//     messagingSenderId,\n//     projectId,\n//     storageBucket\n// } = FIREBASE_CONFIG;\n\nconst config = {\n    apiKey: \"AIzaSyCQAXoLiWogLUag9edVH9Lzih0hPKgQod4\",\n    authDomain: \"econolabsdata.firebaseapp.com\",\n    databaseURL: \"https://econolabsdata.firebaseio.com\",\n    projectId: \"econolabsdata\",\n    storageBucket: \"\",\n    messagingSenderId: \"861588864561\",\n    appId: \"1:861588864561:web:5b815e6837a042fe\"\n    // apiKey,\n    // authDomain,\n    // databaseURL,\n    // projectId,\n    // storageBucket,\n    // messagingSenderId\n};\n\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n    }\n\n    // *** Auth API ***\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n}\n\nexport default Firebase;\n\nexport { FirebaseContext };","import React, { Component } from 'react';\n\nimport { FirebaseContext } from '../config/Firebase';\n\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\n\nconst SignUpForm = () => (\n    <div>\n      <h1>SignUp</h1>\n      <FirebaseContext.Consumer>\n        {firebase => <MyForm firebase={firebase} />}\n      </FirebaseContext.Consumer>\n    </div>\n  );\n  \n\n\nclass MyForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { username, email, passwordOne } = this.state;\n    \n        this.props.firebase\n          .doCreateUserWithEmailAndPassword(email, passwordOne)\n          .then(authUser => {\n            this.setState({ ...INITIAL_STATE });\n          })\n          .catch(error => {\n            this.setState({ error });\n          });\n    \n        event.preventDefault();\n      };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const {\n            username,\n            email,\n            passwordOne,\n            passwordTwo,\n            error,\n        } = this.state;\n\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === '' ||\n            email === '' ||\n            username === '';\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"username\"\n                    value={username}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Full Name\"\n                />\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"passwordOne\"\n                    value={passwordOne}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <input\n                    name=\"passwordTwo\"\n                    value={passwordTwo}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign Up\n                </button>\n\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nexport default SignUpForm;","import React, { Component } from 'react';\nimport { FirebaseContext } from '../config/Firebase';\n\nconst SignInForm = () => (\n  <div>\n    <h1>SignIn</h1>\n    <MyForm />\n    </div>\n);\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n\nclass MyForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email, password } = this.state;\n\n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, password, error } = this.state;\n\n    const isInvalid = password === '' || email === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nexport default SignInForm;\n","import React from 'react';\n\nimport NewData from './editor/NewData';\nimport SignUpForm from './editor/SignUpForm';\nimport SignInForm from './editor/SignInForm';\n\nfunction App() {\n  return (\n    <div>\n       Chart\n     <SignUpForm/>  \n     <SignInForm/>  \n     <NewData/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport Firebase, { FirebaseContext } from './config/Firebase';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n<App />\n    </FirebaseContext.Provider>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}